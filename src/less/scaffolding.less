// Variables
@gray-base:              #000;
@gray-darker:            lighten(@gray-base, 13.5%); // #222
@gray-dark:              lighten(@gray-base, 20%);   // #333
@gray:                   lighten(@gray-base, 33.5%); // #555
@gray-light:             lighten(@gray-base, 46.7%); // #777
@gray-lighter:           lighten(@gray-base, 93.5%); // #eee

@color-primary:         #428bca; // #337ab7
@color-success:         #5cb85c;
@color-info:            #5bc0de;
@color-warning:         #f0ad4e;
@color-danger:          #d9534f;

// Body
@body-bg:               #fff;
// Text
@text-color:            @gray-dark;

@link-color:            @color-primary;
@link-hover-color:      darken(@link-color, 15%);
@link-hover-decoration: underline;

// form
@input-bg:                       #fff;
@input-bg-disabled:              @gray-lighter;
@input-color:                    @gray;
@input-color-placeholder:        #999;

@border-color:                   #ccc;
@table-border:                   darken(@gray-lighter, 7%); // #ddd
@table-bg-hover:                 #f5f5f5;

// Font
@font-family-base:        "Microsoft Yahei", "Hiragino Sans GB", "Helvetica Neue", Helvetica, tahoma, arial, "WenQuanYi Micro Hei", Verdana, sans-serif;

@font-size-base:          14px;
@font-size-large:         ceil((@font-size-base * 1.25)); // ~18px
@font-size-small:         ceil((@font-size-base * 0.85)); // ~12px

@line-height-base:        1.6;// 20/12
@line-height-computed:    floor((@font-size-small * @line-height-base)); // ~20px
@font-weight-base:        400;

// Z-index
@zindex-navbar:            1000;
@zindex-dropdown:          1000;
@zindex-popover:           1060;
@zindex-tooltip:           1070;
@zindex-navbar-fixed:      1030;
@zindex-modal-background:  1040;
@zindex-modal:             1050;

// Media queries
@screen-xs:                  480px;
@screen-xs-min:              @screen-xs;
@screen-phone:               @screen-xs-min;

@screen-sm:                  768px;
@screen-sm-min:              @screen-sm;
@screen-tablet:              @screen-sm-min;

@screen-md:                  992px;
@screen-md-min:              @screen-md;
@screen-desktop:             @screen-md-min;

@screen-lg:                  1200px;
@screen-lg-min:              @screen-lg;
@screen-lg-desktop:          @screen-lg-min;

@screen-xs-max:              (@screen-sm-min - 1);
@screen-sm-max:              (@screen-md-min - 1);
@screen-md-max:              (@screen-lg-min - 1);

// Mixin
.text-hide() {
  font: ~"0/0" a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

.opacity(@opacity) {
  opacity: @opacity;
  // IE8 filter
  @opacity-ie: (@opacity * 100);
  filter: ~"alpha(opacity=@{opacity-ie})";
}

.img-responsive(@display: block) {
  display: @display;
  max-width: 100%;
  height: auto;
}

.label-variant(@color) {
  background-color: @color;
  &[href] {
    &:hover,
    &:focus {
      background-color: darken(@color, 10%);
    }
  }
}

.resizable(@direction) {
  resize: @direction; // Options: horizontal, vertical, both
  overflow: auto; // Per CSS3 UI, `resize` only applies when `overflow` isn't `visible`
}

.responsive-visibility() {
  display: block !important;
  table&  { display: table !important; }
  tr&     { display: table-row !important; }
  th&,
  td&     { display: table-cell !important; }
}

.responsive-invisibility() {
  display: none !important;
}

.size(@width; @height) {
  width: @width;
  height: @height;
}

.square(@size) {
  .size(@size; @size);
}

.reset-text() {
  font-family: @font-family-base;
  // We deliberately do NOT reset font-size.
  font-style: normal;
  font-weight: normal;
  letter-spacing: normal;
  line-break: auto;
  line-height: @line-height-base;
  text-align: left; // Fallback for where `start` is not supported
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  white-space: normal;
  word-break: normal;
  word-spacing: normal;
  word-wrap: normal;
}

.animation(@animation) {
  animation: @animation;
}

.animation-name(@name) {
  animation-name: @name;
}

.animation-duration(@duration) {
  animation-duration: @duration;
}

.animation-timing-function(@timing-function) {
  animation-timing-function: @timing-function;
}

.animation-delay(@delay) {
  animation-delay: @delay;
}

.animation-iteration-count(@iteration-count) {
  animation-iteration-count: @iteration-count;
}

.animation-direction(@direction) {
  animation-direction: @direction;
}

.animation-fill-mode(@fill-mode) {
  animation-fill-mode: @fill-mode;
}

.box-shadow(@shadow) {
  box-shadow: @shadow;
}

.box-sizing(@boxmodel) {
  box-sizing: @boxmodel;
}

.placeholder(@color: @input-color-placeholder) {
  // Firefox
  &::-moz-placeholder {
    color: @color;
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder { color: @color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}

// Transformations
.scale(@ratio) {
  transform: scale(@ratio);
}
.scale(@ratioX; @ratioY) {
  transform: scale(@ratioX, @ratioY);
}
.scaleX(@ratio) {
  transform: scaleX(@ratio);
}
.scaleY(@ratio) {
  transform: scaleY(@ratio);
}
.skew(@x; @y) {
  transform: skewX(@x) skewY(@y);
}
.translate(@x; @y) {
  transform: translate(@x, @y);
}
.translate3d(@x; @y; @z) {
  transform: translate3d(@x, @y, @z);
}
.rotate(@degrees) {
  transform: rotate(@degrees);
}
.rotateX(@degrees) {
  transform: rotateX(@degrees);
}
.rotateY(@degrees) {
  transform: rotateY(@degrees);
}
.perspective(@perspective) {
  perspective: @perspective;
}
.perspective-origin(@perspective) {
  perspective-origin: @perspective;
}
.transform-origin(@origin) {
  transform-origin: @origin;
}


// Transitions
.transition(@transition) {
  transition: @transition;
}
.transition-property(@transition-property) {
  transition-property: @transition-property;
}
.transition-delay(@transition-delay) {
  transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
  transition-duration: @transition-duration;
}
.transition-timing-function(@timing-function) {
  transition-timing-function: @timing-function;
}
.transition-transform(@transition) {
  transition: transform @transition;
}

// User Select
.user-select(@select) {
  user-select: @select;
}

// Clearfix
.clearfix() {
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}